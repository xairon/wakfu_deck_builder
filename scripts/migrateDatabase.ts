/**
 * Script pour ex√©cuter automatiquement les migrations SQL sur Supabase
 * Ce script lit le fichier create_tables.sql et l'ex√©cute sur la base de donn√©es Supabase
 */

import fs from 'fs'
import path from 'path'
import { supabase } from './supabaseClient'

// Chemin vers le fichier SQL de migration
const MIGRATION_FILE_PATH = path.join(
  process.cwd(),
  'supabase',
  'migrations',
  'create_tables.sql'
)

// Fonction pour diviser un script SQL en requ√™tes individuelles
function splitSqlQueries(sql: string): string[] {
  // Diviser le script par point-virgule, mais ignorer les points-virgules dans les commentaires et les cha√Ænes
  const queries: string[] = []
  let currentQuery = ''
  let inComment = false
  let inStringLiteral = false

  for (let i = 0; i < sql.length; i++) {
    const char = sql[i]
    const nextChar = sql[i + 1] || ''

    // G√©rer les commentaires
    if (char === '-' && nextChar === '-' && !inStringLiteral) {
      inComment = true
      currentQuery += char
      continue
    }

    // Fin de ligne = fin de commentaire
    if (inComment && (char === '\n' || char === '\r')) {
      inComment = false
      currentQuery += char
      continue
    }

    // G√©rer les cha√Ænes de caract√®res
    if (char === "'" && !inComment) {
      inStringLiteral = !inStringLiteral
      currentQuery += char
      continue
    }

    // Si on est dans un commentaire ou une cha√Æne, ajouter le caract√®re et continuer
    if (inComment || inStringLiteral) {
      currentQuery += char
      continue
    }

    // Fin de requ√™te
    if (char === ';') {
      currentQuery += char
      const trimmedQuery = currentQuery.trim()
      if (trimmedQuery.length > 1) {
        // √âviter les requ√™tes vides
        queries.push(trimmedQuery)
      }
      currentQuery = ''
      continue
    }

    // Ajouter le caract√®re √† la requ√™te en cours
    currentQuery += char
  }

  // Ajouter la derni√®re requ√™te si elle existe et n'est pas vide
  const trimmedQuery = currentQuery.trim()
  if (trimmedQuery.length > 0 && !trimmedQuery.match(/^\s*$/)) {
    queries.push(trimmedQuery)
  }

  return queries
}

// Fonction pour ex√©cuter les migrations
async function migrateDatabase() {
  try {
    console.log('üîÑ Migration de la base de donn√©es Supabase...')

    // V√©rifier si le fichier de migration existe
    if (!fs.existsSync(MIGRATION_FILE_PATH)) {
      throw new Error(`Fichier de migration non trouv√©: ${MIGRATION_FILE_PATH}`)
    }

    // Lire le fichier SQL
    const sqlContent = fs.readFileSync(MIGRATION_FILE_PATH, 'utf-8')
    console.log(`üìÑ Fichier de migration lu: ${MIGRATION_FILE_PATH}`)

    // Diviser le script en requ√™tes individuelles
    const queries = splitSqlQueries(sqlContent)
    console.log(`üî¢ Nombre de requ√™tes √† ex√©cuter: ${queries.length}`)

    // Ex√©cuter chaque requ√™te s√©quentiellement
    let successCount = 0
    let errorCount = 0

    for (let i = 0; i < queries.length; i++) {
      const query = queries[i]
      const truncatedQuery =
        query.length > 100 ? query.substring(0, 100) + '...' : query

      try {
        console.log(
          `\n‚è≥ Ex√©cution de la requ√™te ${i + 1}/${queries.length}: ${truncatedQuery}`
        )

        // Ex√©cuter la requ√™te SQL
        const { error } = await supabase.rpc('exec_sql', { query })

        if (error) {
          throw error
        }

        console.log(`‚úÖ Requ√™te ${i + 1} ex√©cut√©e avec succ√®s`)
        successCount++
      } catch (error: any) {
        console.error(
          `‚ùå Erreur lors de l'ex√©cution de la requ√™te ${i + 1}:`,
          error.message
        )
        errorCount++

        // Afficher la requ√™te compl√®te en cas d'erreur
        console.error('Requ√™te compl√®te:', query)

        // Si c'est une erreur de duplicat ou que la table existe d√©j√†, on peut continuer
        if (
          error.message.includes('already exists') ||
          error.message.includes('duplicate')
        ) {
          console.log('‚ö†Ô∏è Cet objet existe d√©j√†, nous continuons...')
        } else {
          // Pour les autres erreurs, demander si on veut continuer
          const response = await new Promise<string>((resolve) => {
            console.log("Voulez-vous continuer malgr√© l'erreur? (O/N)")
            process.stdin.once('data', (data) => {
              resolve(data.toString().trim().toLowerCase())
            })
          })

          if (
            response !== 'o' &&
            response !== 'oui' &&
            response !== 'y' &&
            response !== 'yes'
          ) {
            throw new Error("Migration interrompue par l'utilisateur")
          }
        }
      }
    }

    console.log(
      `\n‚úÖ Migration termin√©e avec ${successCount} succ√®s et ${errorCount} erreurs.`
    )
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la migration:', error.message)
  }
}

// Ex√©cuter la migration
migrateDatabase()
